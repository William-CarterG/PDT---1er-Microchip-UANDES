/* Generated by Yosys 0.45 (git sha1 9ed031ddd, clang++ 15.0.0 -fPIC -O3) */

(* keep =  1  *)
(* hdlname = "uart_full_duplex" *)
(* top =  1  *)
(* src = "uart_full_duplex.v:1.1-33.10" *)
module uart_full_duplex(clk, reset, rx, start_transmit, tx, instruction_ready, transmission_done);
  (* src = "uart_full_duplex.v:10.13-10.16" *)
  input clk;
  wire clk;
  (* src = "uart_full_duplex.v:17.14-17.29" *)
  (* unused_bits = "8 9 10 11 12 13 14" *)
  wire [14:0] instruction_out;
  (* src = "uart_full_duplex.v:15.14-15.31" *)
  output instruction_ready;
  wire instruction_ready;
  (* src = "uart_full_duplex.v:11.13-11.18" *)
  input reset;
  wire reset;
  (* src = "uart_full_duplex.v:12.13-12.15" *)
  input rx;
  wire rx;
  (* src = "uart_full_duplex.v:13.13-13.27" *)
  input start_transmit;
  wire start_transmit;
  (* src = "uart_full_duplex.v:16.14-16.31" *)
  output transmission_done;
  wire transmission_done;
  (* src = "uart_full_duplex.v:14.14-14.16" *)
  output tx;
  wire tx;
  (* module_not_derived = 32'd1 *)
  (* src = "uart_full_duplex.v:18.27-24.3" *)
  uart_instruction_handler uart_rx (
    .clk(clk),
    .instruction_out(instruction_out),
    .instruction_ready(instruction_ready),
    .reset(reset),
    .rx(rx)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "uart_full_duplex.v:25.19-32.3" *)
  uart_transmitter uart_tx (
    .clk(clk),
    .data_in(instruction_out[7:0]),
    .reset(reset),
    .start_transmit(start_transmit),
    .transmission_done(transmission_done),
    .tx(tx)
  );
endmodule

(* keep =  1  *)
(* hdlname = "uart_instruction_handler" *)
(* src = "uart_full_duplex.v:34.1-84.10" *)
module uart_instruction_handler(clk, reset, rx, instruction_out, instruction_ready);
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  wire [9:0] _000_;
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  wire [3:0] _001_;
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  (* src = "uart_full_duplex.v:73.7-73.61" *)
  wire _006_;
  (* src = "uart_full_duplex.v:71.10-71.27" *)
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  (* src = "uart_full_duplex.v:49.12-49.24" *)
  reg [9:0] baud_counter;
  (* src = "uart_full_duplex.v:48.12-48.23" *)
  reg [3:0] bit_counter;
  (* src = "uart_full_duplex.v:41.13-41.16" *)
  input clk;
  wire clk;
  (* src = "uart_full_duplex.v:47.13-47.31" *)
  reg [14:0] instruction_buffer;
  (* src = "uart_full_duplex.v:44.20-44.35" *)
  output [14:0] instruction_out;
  reg [14:0] instruction_out;
  (* src = "uart_full_duplex.v:45.13-45.30" *)
  output instruction_ready;
  reg instruction_ready;
  (* src = "uart_full_duplex.v:50.6-50.15" *)
  reg receiving;
  (* src = "uart_full_duplex.v:42.13-42.18" *)
  input reset;
  wire reset;
  (* src = "uart_full_duplex.v:43.13-43.15" *)
  input rx;
  wire rx;
  assign _004_ = receiving & ~(_031_);
  assign _032_ = ~(bit_counter[1] & bit_counter[0]);
  assign _033_ = ~(bit_counter[3] & bit_counter[2]);
  assign _034_ = _033_ | _032_;
  assign _007_ = ~_034_;
  assign _035_ = _034_ | reset;
  assign _005_ = _004_ & ~(_035_);
  assign _003_ = receiving | ~(rx);
  assign _036_ = _003_ & _034_;
  assign _037_ = _031_ ? _003_ : _036_;
  assign _002_ = receiving ? _037_ : _003_;
  assign _038_ = ~(rx | receiving);
  assign _039_ = bit_counter[0] & ~(_038_);
  assign _040_ = ~bit_counter[0];
  assign _041_ = _029_ & ~(_030_);
  assign _042_ = _041_ ? _040_ : _039_;
  assign _001_[0] = receiving ? _042_ : _039_;
  assign _043_ = bit_counter[1] & ~(_038_);
  assign _044_ = bit_counter[1] ^ bit_counter[0];
  assign _045_ = _031_ ? _043_ : _044_;
  assign _001_[1] = receiving ? _045_ : _043_;
  assign _046_ = bit_counter[2] & ~(_038_);
  assign _047_ = ~(_032_ ^ bit_counter[2]);
  assign _048_ = _031_ ? _046_ : _047_;
  assign _001_[2] = receiving ? _048_ : _046_;
  assign _049_ = bit_counter[3] & ~(_038_);
  assign _050_ = bit_counter[2] & ~(_032_);
  assign _051_ = _050_ ^ bit_counter[3];
  assign _052_ = _031_ ? _049_ : _051_;
  assign _001_[3] = receiving ? _052_ : _049_;
  assign _053_ = _041_ | baud_counter[0];
  assign _000_[0] = receiving & ~(_053_);
  assign _054_ = ~(baud_counter[1] ^ baud_counter[0]);
  assign _055_ = _054_ | _041_;
  assign _000_[1] = receiving & ~(_055_);
  assign _056_ = ~(baud_counter[1] & baud_counter[0]);
  assign _057_ = _056_ ^ baud_counter[2];
  assign _058_ = _057_ | _041_;
  assign _000_[2] = receiving & ~(_058_);
  assign _059_ = _056_ | ~(baud_counter[2]);
  assign _060_ = _059_ ^ baud_counter[3];
  assign _061_ = _060_ | _041_;
  assign _000_[3] = receiving & ~(_061_);
  assign _062_ = ~(baud_counter[3] & baud_counter[2]);
  assign _063_ = _062_ | _056_;
  assign _064_ = _063_ ^ baud_counter[4];
  assign _065_ = _064_ | _041_;
  assign _000_[4] = receiving & ~(_065_);
  assign _066_ = _063_ | ~(baud_counter[4]);
  assign _067_ = _066_ ^ baud_counter[5];
  assign _068_ = _067_ | _041_;
  assign _000_[5] = receiving & ~(_068_);
  assign _008_ = _063_ | _026_;
  assign _009_ = _008_ ^ baud_counter[6];
  assign _010_ = _009_ | _041_;
  assign _000_[6] = receiving & ~(_010_);
  assign _011_ = _008_ | ~(baud_counter[6]);
  assign _012_ = _011_ ^ baud_counter[7];
  assign _013_ = _012_ | _041_;
  assign _000_[7] = receiving & ~(_013_);
  assign _014_ = ~(baud_counter[7] & baud_counter[6]);
  assign _015_ = _014_ | _026_;
  assign _016_ = _015_ | _063_;
  assign _017_ = _016_ ^ baud_counter[8];
  assign _018_ = _017_ | _041_;
  assign _000_[8] = receiving & ~(_018_);
  assign _019_ = _016_ | ~(baud_counter[8]);
  assign _020_ = _019_ ^ baud_counter[9];
  assign _021_ = _020_ | _041_;
  assign _000_[9] = receiving & ~(_021_);
  assign _022_ = _034_ | ~(_041_);
  assign _006_ = receiving & ~(_022_);
  assign _023_ = baud_counter[1] & ~(baud_counter[0]);
  assign _024_ = baud_counter[3] | baud_counter[2];
  assign _025_ = _023_ & ~(_024_);
  assign _026_ = ~(baud_counter[5] & baud_counter[4]);
  assign _027_ = baud_counter[6] | ~(baud_counter[7]);
  assign _028_ = _027_ | _026_;
  assign _029_ = _025_ & ~(_028_);
  assign _030_ = baud_counter[9] | ~(baud_counter[8]);
  assign _031_ = _030_ | ~(_029_);
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[0] <= 1'h0;
    else if (_004_) instruction_buffer[0] <= instruction_buffer[1];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[1] <= 1'h0;
    else if (_004_) instruction_buffer[1] <= instruction_buffer[2];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[2] <= 1'h0;
    else if (_004_) instruction_buffer[2] <= instruction_buffer[3];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[3] <= 1'h0;
    else if (_004_) instruction_buffer[3] <= instruction_buffer[4];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[4] <= 1'h0;
    else if (_004_) instruction_buffer[4] <= instruction_buffer[5];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[5] <= 1'h0;
    else if (_004_) instruction_buffer[5] <= instruction_buffer[6];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[6] <= 1'h0;
    else if (_004_) instruction_buffer[6] <= instruction_buffer[7];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[7] <= 1'h0;
    else if (_004_) instruction_buffer[7] <= instruction_buffer[8];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[8] <= 1'h0;
    else if (_004_) instruction_buffer[8] <= instruction_buffer[9];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[9] <= 1'h0;
    else if (_004_) instruction_buffer[9] <= instruction_buffer[10];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[10] <= 1'h0;
    else if (_004_) instruction_buffer[10] <= instruction_buffer[11];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[11] <= 1'h0;
    else if (_004_) instruction_buffer[11] <= instruction_buffer[12];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[12] <= 1'h0;
    else if (_004_) instruction_buffer[12] <= instruction_buffer[13];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[13] <= 1'h0;
    else if (_004_) instruction_buffer[13] <= instruction_buffer[14];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_buffer[14] <= 1'h0;
    else if (_004_) instruction_buffer[14] <= rx;
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) instruction_ready <= 1'h0;
    else if (_004_) instruction_ready <= _007_;
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[0] <= instruction_buffer[0];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[1] <= instruction_buffer[1];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[2] <= instruction_buffer[2];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[3] <= instruction_buffer[3];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[4] <= instruction_buffer[4];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[5] <= instruction_buffer[5];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[6] <= instruction_buffer[6];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[7] <= instruction_buffer[7];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[8] <= instruction_buffer[8];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[9] <= instruction_buffer[9];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[10] <= instruction_buffer[10];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[11] <= instruction_buffer[11];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[12] <= instruction_buffer[12];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[13] <= instruction_buffer[13];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk)
    if (_005_) instruction_out[14] <= instruction_buffer[14];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[0] <= 1'h0;
    else bit_counter[0] <= _001_[0];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[1] <= 1'h0;
    else bit_counter[1] <= _001_[1];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[2] <= 1'h0;
    else bit_counter[2] <= _001_[2];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[3] <= 1'h0;
    else bit_counter[3] <= _001_[3];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[0] <= 1'h0;
    else if (_003_) baud_counter[0] <= _000_[0];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[1] <= 1'h0;
    else if (_003_) baud_counter[1] <= _000_[1];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[2] <= 1'h0;
    else if (_003_) baud_counter[2] <= _000_[2];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[3] <= 1'h0;
    else if (_003_) baud_counter[3] <= _000_[3];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[4] <= 1'h0;
    else if (_003_) baud_counter[4] <= _000_[4];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[5] <= 1'h0;
    else if (_003_) baud_counter[5] <= _000_[5];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[6] <= 1'h0;
    else if (_003_) baud_counter[6] <= _000_[6];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[7] <= 1'h0;
    else if (_003_) baud_counter[7] <= _000_[7];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[8] <= 1'h0;
    else if (_003_) baud_counter[8] <= _000_[8];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[9] <= 1'h0;
    else if (_003_) baud_counter[9] <= _000_[9];
  (* src = "uart_full_duplex.v:51.2-83.6" *)
  always @(posedge clk, posedge reset)
    if (reset) receiving <= 1'h0;
    else receiving <= _002_;
  always @(posedge clk or posedge reset) begin
    if (_004_) begin
      $write("Buffer: %015b, Receiving bit: %01b, Bit Counter: %2d\n", $unsigned(instruction_buffer), $unsigned(rx), $unsigned(bit_counter));
    end
    if (_006_) begin
      $write("termine de recibir %015b\n", $unsigned(instruction_buffer));
    end
  end
endmodule

(* keep =  1  *)
(* hdlname = "uart_transmitter" *)
(* src = "uart_full_duplex.v:85.1-146.10" *)
module uart_transmitter(clk, reset, data_in, start_transmit, tx, transmission_done);
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  wire [9:0] _000_;
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  wire [3:0] _001_;
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  wire [7:0] _002_;
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  wire _003_;
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  wire _004_;
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  wire _005_;
  wire _006_;
  (* src = "uart_full_duplex.v:137.7-137.47" *)
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  (* src = "uart_full_duplex.v:100.12-100.24" *)
  reg [9:0] baud_counter;
  (* src = "uart_full_duplex.v:101.12-101.23" *)
  reg [3:0] bit_counter;
  (* src = "uart_full_duplex.v:93.13-93.16" *)
  input clk;
  wire clk;
  (* src = "uart_full_duplex.v:95.19-95.26" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "uart_full_duplex.v:94.13-94.18" *)
  input reset;
  wire reset;
  (* src = "uart_full_duplex.v:102.12-102.21" *)
  reg [7:0] shift_reg;
  (* src = "uart_full_duplex.v:96.13-96.27" *)
  input start_transmit;
  wire start_transmit;
  (* src = "uart_full_duplex.v:98.13-98.30" *)
  output transmission_done;
  reg transmission_done;
  (* src = "uart_full_duplex.v:103.6-103.18" *)
  reg transmitting;
  (* src = "uart_full_duplex.v:97.13-97.15" *)
  output tx;
  reg tx;
  assign _006_ = start_transmit | transmitting;
  assign _072_ = ~(bit_counter[1] | bit_counter[0]);
  assign _073_ = bit_counter[2] | ~(bit_counter[3]);
  assign _074_ = _072_ & ~(_073_);
  assign _075_ = _006_ & ~(_074_);
  assign _076_ = baud_counter[1] & ~(baud_counter[0]);
  assign _077_ = baud_counter[3] | baud_counter[2];
  assign _078_ = _076_ & ~(_077_);
  assign _079_ = ~(baud_counter[5] & baud_counter[4]);
  assign _080_ = baud_counter[6] | ~(baud_counter[7]);
  assign _081_ = _080_ | _079_;
  assign _082_ = _078_ & ~(_081_);
  assign _083_ = baud_counter[9] | ~(baud_counter[8]);
  assign _084_ = _083_ | ~(_082_);
  assign _085_ = _084_ ? _006_ : _075_;
  assign _004_ = transmitting ? _085_ : start_transmit;
  assign _086_ = start_transmit & ~(transmitting);
  assign _087_ = _086_ ? data_in[7] : shift_reg[0];
  assign _088_ = _074_ ? _087_ : shift_reg[1];
  assign _089_ = _084_ ? _087_ : _088_;
  assign _002_[0] = transmitting ? _089_ : _087_;
  assign _090_ = _086_ ? data_in[6] : shift_reg[1];
  assign _091_ = _074_ ? _090_ : shift_reg[2];
  assign _092_ = _084_ ? _090_ : _091_;
  assign _002_[1] = transmitting ? _092_ : _090_;
  assign _093_ = _086_ ? data_in[5] : shift_reg[2];
  assign _094_ = _074_ ? _093_ : shift_reg[3];
  assign _095_ = _084_ ? _093_ : _094_;
  assign _002_[2] = transmitting ? _095_ : _093_;
  assign _096_ = _086_ ? data_in[4] : shift_reg[3];
  assign _097_ = _074_ ? _096_ : shift_reg[4];
  assign _098_ = _084_ ? _096_ : _097_;
  assign _002_[3] = transmitting ? _098_ : _096_;
  assign _099_ = _086_ ? data_in[3] : shift_reg[4];
  assign _100_ = _074_ ? _099_ : shift_reg[5];
  assign _101_ = _084_ ? _099_ : _100_;
  assign _002_[4] = transmitting ? _101_ : _099_;
  assign _008_ = _086_ ? data_in[2] : shift_reg[5];
  assign _009_ = _074_ ? _008_ : shift_reg[6];
  assign _010_ = _084_ ? _008_ : _009_;
  assign _002_[5] = transmitting ? _010_ : _008_;
  assign _011_ = _086_ ? data_in[1] : shift_reg[6];
  assign _012_ = _074_ ? _011_ : shift_reg[7];
  assign _013_ = _084_ ? _011_ : _012_;
  assign _002_[6] = transmitting ? _013_ : _011_;
  assign _014_ = _086_ ? data_in[0] : shift_reg[7];
  assign _015_ = _014_ & _074_;
  assign _016_ = _084_ ? _014_ : _015_;
  assign _002_[7] = transmitting ? _016_ : _014_;
  assign _017_ = bit_counter[0] & ~(_086_);
  assign _018_ = ~bit_counter[0];
  assign _019_ = _074_ ? _017_ : _018_;
  assign _020_ = _084_ ? _017_ : _019_;
  assign _001_[0] = transmitting ? _020_ : _017_;
  assign _021_ = bit_counter[1] & ~(_086_);
  assign _022_ = bit_counter[1] ^ bit_counter[0];
  assign _023_ = _084_ ? _021_ : _022_;
  assign _001_[1] = transmitting ? _023_ : _021_;
  assign _024_ = bit_counter[2] & ~(_086_);
  assign _025_ = ~(bit_counter[1] & bit_counter[0]);
  assign _026_ = ~(_025_ ^ bit_counter[2]);
  assign _027_ = _074_ ? _024_ : _026_;
  assign _028_ = _084_ ? _024_ : _027_;
  assign _001_[2] = transmitting ? _028_ : _024_;
  assign _029_ = bit_counter[3] & ~(_086_);
  assign _030_ = bit_counter[2] & ~(_025_);
  assign _031_ = _030_ ^ bit_counter[3];
  assign _032_ = _074_ ? _029_ : _031_;
  assign _033_ = _084_ ? _029_ : _032_;
  assign _001_[3] = transmitting ? _033_ : _029_;
  assign _034_ = _082_ & ~(_083_);
  assign _035_ = _034_ | baud_counter[0];
  assign _000_[0] = transmitting & ~(_035_);
  assign _036_ = ~(baud_counter[1] ^ baud_counter[0]);
  assign _037_ = _036_ | _034_;
  assign _000_[1] = transmitting & ~(_037_);
  assign _038_ = ~(baud_counter[1] & baud_counter[0]);
  assign _039_ = _038_ ^ baud_counter[2];
  assign _040_ = _039_ | _034_;
  assign _000_[2] = transmitting & ~(_040_);
  assign _041_ = _038_ | ~(baud_counter[2]);
  assign _042_ = _041_ ^ baud_counter[3];
  assign _043_ = _042_ | _034_;
  assign _000_[3] = transmitting & ~(_043_);
  assign _044_ = ~(baud_counter[3] & baud_counter[2]);
  assign _045_ = _044_ | _038_;
  assign _046_ = _045_ ^ baud_counter[4];
  assign _047_ = _046_ | _034_;
  assign _000_[4] = transmitting & ~(_047_);
  assign _048_ = _045_ | ~(baud_counter[4]);
  assign _049_ = _048_ ^ baud_counter[5];
  assign _050_ = _049_ | _034_;
  assign _000_[5] = transmitting & ~(_050_);
  assign _051_ = _045_ | _079_;
  assign _052_ = _051_ ^ baud_counter[6];
  assign _053_ = _052_ | _034_;
  assign _000_[6] = transmitting & ~(_053_);
  assign _054_ = _051_ | ~(baud_counter[6]);
  assign _055_ = _054_ ^ baud_counter[7];
  assign _056_ = _055_ | _034_;
  assign _000_[7] = transmitting & ~(_056_);
  assign _057_ = ~(baud_counter[7] & baud_counter[6]);
  assign _058_ = _057_ | _079_;
  assign _059_ = _058_ | _045_;
  assign _060_ = _059_ ^ baud_counter[8];
  assign _061_ = _060_ | _034_;
  assign _000_[8] = transmitting & ~(_061_);
  assign _062_ = _059_ | ~(baud_counter[8]);
  assign _063_ = _062_ ^ baud_counter[9];
  assign _064_ = _063_ | _034_;
  assign _000_[9] = transmitting & ~(_064_);
  assign _065_ = transmission_done & ~(_086_);
  assign _066_ = _065_ | _074_;
  assign _067_ = _084_ ? _065_ : _066_;
  assign _003_ = transmitting ? _067_ : _065_;
  assign _068_ = tx & ~(_086_);
  assign _069_ = _074_ | shift_reg[0];
  assign _070_ = _084_ ? _068_ : _069_;
  assign _005_ = transmitting ? _070_ : _068_;
  assign _071_ = _084_ | _074_;
  assign _007_ = transmitting & ~(_071_);
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[0] <= _002_[0];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[1] <= _002_[1];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[2] <= _002_[2];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[3] <= _002_[3];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[4] <= _002_[4];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[5] <= _002_[5];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[6] <= _002_[6];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk)
    if (!reset) shift_reg[7] <= _002_[7];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) tx <= 1'h1;
    else tx <= _005_;
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) transmission_done <= 1'h0;
    else transmission_done <= _003_;
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[0] <= 1'h0;
    else bit_counter[0] <= _001_[0];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[1] <= 1'h0;
    else bit_counter[1] <= _001_[1];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[2] <= 1'h0;
    else bit_counter[2] <= _001_[2];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) bit_counter[3] <= 1'h0;
    else bit_counter[3] <= _001_[3];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[0] <= 1'h0;
    else if (_006_) baud_counter[0] <= _000_[0];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[1] <= 1'h0;
    else if (_006_) baud_counter[1] <= _000_[1];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[2] <= 1'h0;
    else if (_006_) baud_counter[2] <= _000_[2];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[3] <= 1'h0;
    else if (_006_) baud_counter[3] <= _000_[3];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[4] <= 1'h0;
    else if (_006_) baud_counter[4] <= _000_[4];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[5] <= 1'h0;
    else if (_006_) baud_counter[5] <= _000_[5];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[6] <= 1'h0;
    else if (_006_) baud_counter[6] <= _000_[6];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[7] <= 1'h0;
    else if (_006_) baud_counter[7] <= _000_[7];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[8] <= 1'h0;
    else if (_006_) baud_counter[8] <= _000_[8];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) baud_counter[9] <= 1'h0;
    else if (_006_) baud_counter[9] <= _000_[9];
  (* src = "uart_full_duplex.v:110.2-145.6" *)
  always @(posedge clk, posedge reset)
    if (reset) transmitting <= 1'h0;
    else transmitting <= _004_;
  always @(posedge clk or posedge reset) begin
    if (_007_) begin
      $write("transmito: %01b\n", $unsigned(shift_reg[0]));
    end
  end
endmodule
